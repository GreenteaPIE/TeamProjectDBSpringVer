<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.db.mapper.AdminMapper">
<!-- 옥션등록 -->
	<insert id="insertAuction">
		insert into auction (userid, bname, pname, price,
		startPrice, endTime,
		onOff, psize, imgUrl,num)
		values(#{userid},
		#{bname}, #{pname}, #{price}, #{startPrice}, #{endTime}, 1, #{psize},
		#{imgUrl},auction_seq.nextval)
	</insert>
	
	<!-- 유저목록 -->
	<select id="getUserList" resultType="com.db.model.UserVO">
		select * from shopuser
	</select>
	
	<!-- 유저 삭제 -->
	<delete id="deleteUser">
		delete shopuser where userid = #{userid}
	</delete>
	
	<!-- 유저 상세보기 -->
	<select id="getUser" resultType="com.db.model.UserVO">
		select * from shopuser where
		userid = #{userid}
	</select>

	<!-- 유저 업데이트 -->
	<update id="adminUserUpdate">
		update shopuser set name = #{name}, email = #{email}, point = #{point}, grade=#{grade},
		address1 = #{address1}, address2 = #{address2},
		address3 = #{address3}, phone =	#{phone}, gender = #{gender}
		where userid = #{userid}
	</update>

	<!-- 브랜드 등록 -->
	<insert id="brandEnroll">
		insert into brand values(#{bname}, #{imgurl})
	</insert>
	
	<!-- 브랜드 삭제 -->
	<delete id="deleteBrand">
		delete from brand where bname = #{bname}
	</delete>

	<!-- 신규 주문 가져오기 -->
	<select id="getNewOrder" resultType="com.db.model.OrderVO">

		select*from order_view where result = 1
	</select>
	
	<!-- 처리 주문 가져오기 -->
	<select id="getProcessOrder" resultType="com.db.model.OrderVO">

		select*from order_view where result = 2
	</select>
	
	<!-- 취소 주문 가져오기 -->
	<select id="getWithdrawOrder" resultType="com.db.model.OrderVO">

		select*from order_view where result = 4
	</select>
	
	<!-- 판매된 주문 가져오기 -->
	<select id="getSalesOrder" resultType="com.db.model.OrderVO">

		select*from order_view where result = 3
	</select>
	
	
	<!-- 확인한 주문 orderdetail result 2로 변경 -->
	<update id="checkOrderChangeResult">

		update order_detail set result = 2 where
		ordernumber=#{ordernumber}
	</update>
	
	<!-- 발송처리한 주문 orderdetail result 3으로 변경 -->
	<update id="shipmentChangeResult">

		update order_detail set result = 3 where
		ordernumber=#{ordernumber}
	</update>
	
	<!-- 취소처리한 주문 orderdetail result 5으로 변경 -->
	<update id="withdrawOrderChangeResult">

		update order_detail set result = 5 where
		ordernumber=#{ordernumber}
	</update>
	
	<!-- 검색 조건문 -->
	<sql id="criteria">
		<trim prefix="AND (" suffix=")" prefixOverrides="OR">
			<foreach collection="typeArr" item="type">
				<trim prefix="OR">
					<choose>
						<when test="type == 'T'.toString()">
							name like '%'||#{keyword}||'%'
						</when>
						<when test="type == 'C'.toString()">
							phone like '%'||#{keyword}||'%'
						</when>
						<when test="type == 'W'.toString()">
							userid like '%'||#{keyword}||'%'
						</when>
						<when test="type == 'M'.toString()">
							userid = #{keyword}
						</when>
					</choose>
				</trim>
			</foreach>
		</trim>
		 <!-- 카테고리 검색 처리 -->
  <if test="category != null and (category == 'F'.toString() or category == 'S'.toString() or category == 'Q'.toString())">
    AND category = #{category}
  </if>

	</sql>
	
	<!-- 회원 목록(페이징) -->
	<select id="getUserListPaging" resultType="com.db.model.UserVO"> 
	
 	<![CDATA[ -->
		
		select userid, name, gender, email, address1, address2, address3, phone, grade, point, enter from( 
		
	        select /*+INDEX_ASC(shopuser idx_shopuser_enter_desc) */ rownum  as rn, userid, name, gender, email, address1, address2, address3, phone, grade, point, enter
		          
 		        from shopuser where rownum <= #{pageNum} * #{amount}  
 	]]>
		<if test="keyword != null">
			<include refid="criteria"></include>
		</if> 
	
 	<![CDATA[ 
			        
 			    ) 
			        
 		where rn > (#{pageNum} -1) * #{amount} 
	
 	]]>

	</select>
	
	<!-- 총 회원 수 -->
	<select id="getUserTotal" resultType="int">

		select count(*) from free_board

		<if test="keyword != null">

			where num > 0
			<include refid="criteria"></include>

		</if>

	</select>

	<!-- 등록된 상품목록 전체 가져오기 -->
	<select id="getProductList" resultType="com.db.model.ProductVO">
		<![CDATA[
			select * from (
				select /*+INDEX_DESC(SYS_C008634)*/
					rownum as rn, num, bname, pname, pGender, kind, imgurl, psize, balance, price, explain, writedate, readcount, purchasedNum, discountrate
				from product
				where 
				]]>
		<if test="keyword !=null">
			pname like '%'||#{keyword}||'%' and
		</if>
		<![CDATA[
			rownum <= #{pageNum}*#{amount}
			)
			where rn > (#{pageNum}-1)*#{amount}
			order by writedate desc
			]]>
	</select>

	<!-- 등록된 브랜드 목록 가져오기 + 검색 -->
	<select id="getBrandList" resultType="com.db.model.BrandVO">
	<![CDATA[
			select * from (
				select /*+INDEX_DESC(SYS_C008746)*/
					rownum as rn, bname
				from brand
				where 
				]]>
		<if test="keyword !=null">
			bname like '%'||#{keyword}||'%' and
		</if>
		<![CDATA[
			rownum <= #{pageNum}*#{amount}
			)
			where rn > (#{pageNum}-1)*#{amount}
			]]>
	</select>

	<!-- 등록된 상품 갯수 가져오기 -->
	<select id="productGetTotal" resultType="int">
		select count(*) from product
		<if test="keyword!=null">
			where pname like '%' || #{keyword} || '%'
		</if>
	</select>

	<!-- 등록된 브랜드 갯수 가져오기 -->
	<select id="brandGetTotal" resultType="int">
		select count(*) from brand
		<if test="keyword!=null">
			where bname like '%' || #{keyword} || '%'
		</if>
	</select>

	<!-- 상품등록 -->
	<insert id="productEnroll">
		<selectKey keyProperty="num" resultType="int" order="BEFORE">
			select
			product_seq.nextval + 256 from dual
		</selectKey>
		insert into product(num, pGender, bname, pname, kind,
		imgurl, psize,
		price, discountrate, balance, purchasednum, explain)
		values(#{num},
		#{pGender}, #{bname}, #{pname}, #{kind}, #{imgUrl, jdbcType=VARCHAR},
		#{psize}, #{price},
		#{discountrate}, #{balance}, #{purchasedNum},
		#{explain})
	</insert>

	<!-- 상품정보 -->
	<select id="productGetDetail"
		resultType="com.db.model.ProductVO">
		select * from product where num=#{num}
	</select>

	<!-- 상품 삭제 -->
	<delete id="productDelete">
		delete from product where num=#{num}
	</delete>

	<!-- 상품 수정 -->
	<update id="productModify">
		update product set
		bname = #{bname},
		pname = #{pname},
		pGender = #{pGender},
		kind = #{kind},
		psize = #{psize},
		price = #{price},
		discountrate =
		#{discountrate},
		balance = #{balance},
		explain =
		#{explain},
		imgUrl=#{imgUrl, jdbcType=VARCHAR}
		where num=#{num}
	</update>
	
</mapper>