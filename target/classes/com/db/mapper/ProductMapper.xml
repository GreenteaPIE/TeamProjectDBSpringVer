<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.db.mapper.ProductMapper">

	<!-- 메인 브랜드 리스트 -->
	<select id="brandList" resultType="com.db.model.BrandVO">

		select * from brand

	</select>

	<!-- 브랜드 상품 리스트 -->
	<select id="brandProductList"
		resultType="com.db.model.ProductVO">

		SELECT num, pGender, bName, kind, pName, imgUrl, pSize,
		balance,
		price, purchasedNum, explain, writedate, readcount,
		discountrate FROM
		(SELECT num,
		pGender, bName, kind, pName, imgUrl,
		pSize, balance,
		price,
		purchasedNum, explain, writedate, readcount,
		discountrate, ROW_NUMBER() OVER
		(PARTITION BY pName ORDER BY num) RN
		FROM PRODUCT WHERE bname LIKE
		#{bname} )WHERE RN = 1

	</select>

	<!-- 브랜드 상품 카테고리TOP 리스트 -->
	<select id="brandCateGoriesTopList"
		resultType="com.db.model.ProductVO">

		SELECT num, pGender, bName, kind, pName, imgUrl, pSize,
		balance, price, purchasedNum, explain, writedate, readcount,
		discountrate
		FROM (
		SELECT num, pGender, bName, kind, pName, imgUrl,
		pSize, balance,
		price,
		purchasedNum, explain, writedate, readcount,
		discountrate,
		ROW_NUMBER() OVER
		(PARTITION BY pName ORDER BY num) RN
		FROM PRODUCT
		WHERE bname LIKE
		#{bname} AND kind = 1
		)
		WHERE RN = 1

	</select>

	<!-- 브랜드 상품 카테고리Bottom 리스트 -->
	<select id="brandCateGoriesBottomList"
		resultType="com.db.model.ProductVO">

		SELECT num, pGender, bName, kind, pName, imgUrl, pSize,
		balance, price, purchasedNum, explain, writedate, readcount,
		discountrate
		FROM (
		SELECT num, pGender, bName, kind, pName, imgUrl,
		pSize, balance,
		price,
		purchasedNum, explain, writedate, readcount,
		discountrate,
		ROW_NUMBER() OVER
		(PARTITION BY pName ORDER BY num) RN
		FROM PRODUCT
		WHERE bname LIKE
		#{bname} AND kind = 2
		)
		WHERE RN = 1

	</select>

	<!-- 브랜드 상품 카테고리Bouti 리스트 -->
	<select id="brandCateGoriesBoutiList"
		resultType="com.db.model.ProductVO">

		SELECT num, pGender, bName, kind, pName, imgUrl, pSize,
		balance, price, purchasedNum, explain, writedate, readcount,
		discountrate
		FROM (
		SELECT num, pGender, bName, kind, pName, imgUrl,
		pSize, balance,
		price,
		purchasedNum, explain, writedate, readcount,
		discountrate,
		ROW_NUMBER() OVER
		(PARTITION BY pName ORDER BY num) RN
		FROM PRODUCT
		WHERE bname LIKE
		#{bname} AND kind = 3
		)
		WHERE RN = 1

	</select>

	<!-- 상품 검색 리스트 -->
	<select id="searchProduct" resultType="com.db.model.ProductVO">

		SELECT num, pGender,
		bName, kind, pName, imgUrl, pSize, balance, price,
		purchasedNum,
		explain, writedate, readcount, discountrate
		FROM (
		SELECT num, pGender,
		bName, kind,
		pName, imgUrl, pSize, balance, price,
		purchasedNum,
		explain, writedate, discountrate,
		readcount,
		ROW_NUMBER() OVER
		(PARTITION BY pName ORDER BY num) RN
		FROM
		PRODUCT
		WHERE pname LIKE '%'
		||#{pname}|| '%'
		)
		WHERE RN = 1

	</select>

	<!-- 상품 상세보기 -->
	<select id="productDetail" resultType="com.db.model.ProductVO">

		select * from product
		where num = #{num}

	</select>

	<!-- 상품 사이즈 리스트 -->
	<select id="productSizeList" resultType="com.db.model.ProductVO">

		select psize from
		product where pname = #{pname}

	</select>

	<!-- 장바구니 상품 추가 -->
	<select id="addCart" resultType="com.db.model.CartVO">

		insert into cart(cartnum,
		userid, num, psize, quantity, price)
		values (cart_seq.nextval,
		#{userid}, #{num}, #{psize}, #{quantity},
		#{price})

	</select>

	<!-- 모든 상품정보 불러오기 -->
	<select id="getAllProduct" resultType="com.db.model.ProductVO">

		select * from product

	</select>

	<!-- 장바구니 리스트 불러오기 -->
	<select id="getCartList" resultType="com.db.model.CartVO">
		SELECT *
		FROM cart
		WHERE
		userId=#{userid} AND result='1'
		ORDER BY orderDate DESC
	</select>

	<!-- 장바구니 상품 갯수 불러오기 -->
	<select id="countCart" resultType="int" parameterType="String">
		SELECT
		COUNT(*) FROM cart WHERE userid = #{userid} and result ='1'
	</select>

	<!-- 모든 상품을 중복 없이 불러오기 -->
	<select id="getAllProductNoDup"
		resultType="com.db.model.ProductVO">

		SELECT num, pGender, bName, kind, pName, imgUrl, pSize,
		balance, price, purchasedNum, explain, writedate, readcount,
		discountrate
		FROM (
		SELECT num, pGender, bName, kind, pName, imgUrl,
		pSize,
		balance, price, purchasedNum, explain, writedate, readcount,
		discountrate,
		ROW_NUMBER() OVER (PARTITION BY pName ORDER BY num) RN
		FROM PRODUCT
		)
		WHERE RN = 1


	</select>

	<!-- 장바구니num으로 정보 불러오기 -->
	<select id="findByCartNum" resultType="com.db.model.CartVO">
		select * from cart where
		cartnum =#{cartnum}
	</select>

	<!-- 장바구니 수량감소 -->
	<update id="decreaseQuantity">

		update cart SET quantity = quantity - 1
		where cartnum
		= #{carnum}

	</update>

	<!-- 장바구니 수량증가 -->
	<update id="increaseQuantity">

		update cart SET quantity = quantity + 1
		where cartnum
		= #{carnum}

	</update>

	<!-- 장바구니 상품삭제 -->
	<delete id="cartDelete">

		delete from cart where cartnum=#{cartnum}

	</delete>

	<!-- 결제정보 추가(orders table) -->
	<insert id="addOrders">
		insert into
		orders(ordernumber, userid)
		values(orders_seq.nextval,
		#{userid})
	</insert>

	<!-- order detail 추가 -->
	<insert id="addOrderDetail">
		insert into order_detail(
		orderdetailnumber,
		ordernumber,num, quantity, price,
		psize, totalprice, name, email,
		address1, address2, address3, phone
		) values (
		order_detail_seq.nextval, #{ordernumber},#{cart.num},
		#{cart.quantity}, #{cart.price}, #{cart.psize}, #{totalprice},
		#{name}, #{email},
		#{address1},
		#{address2}, #{address3}, #{phone}
		)
	</insert>

	<!-- orders table ordernumber값 가져오기 -->
	<select id="getLatestOrderNumber" resultType="int">
		SELECT
		MAX(orderNumber) FROM orders WHERE userid=#{userid}
	</select>


	<!-- order_view 에서 정보가져오기 -->
	<select id="getOrderList" resultType="com.db.model.OrderVO">
		select * from order_view
		where ordernumber = #{ordernumber}
	</select>
    <!-- 제품 이름으로 제품상세 불러오기 -->
    <select id="productDetailByPname" resultType="com.db.model.ProductVO">
        select * from product where pname = #{pname} and rownum = 1
    </select>


	


	<!-- 주문완료한 cart result 0으로 변경 -->
	<update id="cartResultChange">

		update cart set result = 0 where cartnum=#{cart.cartnum}
	</update>

	<!-- 사용한 coupon result 0으로 변경 -->
	<update id="useCoupon">
		update coupon set couponresult = 0 where cnum=#{cnum}
	</update>

	<!-- 주문완료 후 포인트 지급 -->
	<update id="increaseUserPoint" parameterType="map">
		UPDATE shopuser
		SET point = point + (#{totalprice} * 0.01)
		WHERE userid = #{userid}
	</update>

	<select id="getAuctionList" resultType="com.db.model.AuctionVO">
		select * from auction order by endTime, onOff desc
	</select>
	
	<select id="getAuctionDetail" resultType="com.db.model.AuctionVO">
		select * from auction where num = #{num}
	</select>
	<update id="dealAuction">
		update auction set price=#{price}, userId=#{userId} where num = #{num}
	</update>
	<update id="endAuction">
		update auction set onOff=0 where num = #{num}
	</update>

</mapper>